{
  "files.trimTrailingWhitespace": true,
  "security.workspace.trust.untrustedFiles": "open",
  "editor.largeFileOptimizations": false,
  "editor.formatOnSave": true,

  //Vim stuff good luck
  "vim.handleKeys": {
    "<C-t>": false, //Command t
    "<C-.>": false //Open code actions
  },
  "vim.leader": "<space>",
  "vim.normalModeKeyBindings": [
    //Use VSCode Undo instead of vim undo
    {
      "before": ["u"],
      "after": [],
      "commands": ["undo"]
    },
    {
      "before": ["<C-r>"],
      "after": [],
      "commands": ["redo"]
    },
    //Paste without yanking
    {
      "before": ["leader", "p"],
      "commands": ["editor.action.clipboardPasteAction"]
    },

    // Toggle sidebar
    {
      "before": ["leader", "b"],
      "commands": ["workbench.action.toggleSidebarVisibility"]
    },

    //Tab navigation
    {
      "before": ["leader", "1"],
      "commands": ["workbench.action.openEditorAtIndex1"]
    },
    {
      "before": ["leader", "2"],
      "commands": ["workbench.action.openEditorAtIndex2"]
    },
    {
      "before": ["leader", "3"],
      "commands": ["workbench.action.openEditorAtIndex3"]
    },
    {
      "before": ["leader", "4"],
      "commands": ["workbench.action.openEditorAtIndex4"]
    },
    {
      "before": ["leader", "5"],
      "commands": ["workbench.action.openEditorAtIndex5"]
    },
    {
      "before": ["leader", "6"],
      "commands": ["workbench.action.openEditorAtIndex6"]
    },
    {
      "before": ["leader", "7"],
      "commands": ["workbench.action.openEditorAtIndex7"]
    },
    {
      "before": ["leader", "8"],
      "commands": ["workbench.action.openEditorAtIndex8"]
    },
    {
      "before": ["leader", "9"],
      "commands": ["workbench.action.openEditorAtIndex9"]
    },

    //Dialog operations
    {
      "before": ["leader", "o"],
      "commands": ["workbench.action.files.openFile"]
    },

    //LSP stuff
    {
      "before": ["leader", "i"],
      "commands": ["editor.action.revealDefinition"]
    },

    {
      "before": ["leader", "r"],
      "commands": ["editor.action.rename"]
    },

    {
      "before": ["leader", "K"],
      "commands": ["editor.action.showHover"]
    },

    {
      "before": ["g", "["],
      "commands": ["editor.action.marker.next"]
    },
    {
      "before": ["g", "]"],
      "commands": ["editor.action.marker.prev"]
    },
    {
      "before": ["g", "r"],
      "commands": ["editor.action.goToReferences"]
    },

    //Vimspector / debugging
    // Start
    {
      "before": ["leader", "d", "d"],
      "commands": ["workbench.action.debug.start"]
    },
    // Reset / Stop
    {
      "before": ["leader", "d", "x"],
      "commands": ["workbench.action.debug.stop"]
    },
    // Continue
    {
      "before": ["leader", "d", "space"],
      "commands": ["workbench.action.debug.continue"]
    },
    // Step into
    {
      "before": ["leader", "d", "l"],
      "commands": ["workbench.action.debug.stepInto"]
    },
    // Step out
    {
      "before": ["leader", "d", "k"],
      "commands": ["workbench.action.debug.stepOut"]
    },
    // Step over
    {
      "before": ["leader", "d", "j"],
      "commands": ["workbench.action.debug.stepOver"]
    },
    // Toggle breakpoint
    {
      "before": ["leader", "d", "b", "p"],
      "commands": ["editor.debug.action.toggleBreakpoint"]
    },
    // Add/Toggle conditional breakpoint
    {
      "before": ["leader", "d", "c", "b", "p"],
      "commands": ["editor.debug.action.conditionalBreakpoint"]
    },
    // Run to cursor
    {
      "before": ["leader", "d", "r", "c"],
      "commands": ["editor.debug.action.runToCursor"]
    },

    //Other stuff
    {
      "before": ["leader", "%"],
      "commands": ["extension.matchitJumpItems"]
    }
  ],
  "vim.visualModeKeyBindings": [
    // Wrap with emmet
    {
      "before": ["leader", "w"],
      "commands": ["editor.emmet.action.wrapWithAbbreviation"]
    }
  ],
  "vim.useSystemClipboard": true,
  "vva.trustedDomain": true,
  "editor.lineNumbers": "relative",
  "workbench.editor.limit.enabled": true,

  "terminal.external.osxExec": "iTerm.app",
  //"terminal.integrated.shell.osx": "/bin/bash",
  "terminal.integrated.fontFamily": "MesloLGM Nerd Font",

  "C_Cpp.autocompleteAddParentheses": true,

  "editor.rulers": [80, 140],
  "workbench.colorCustomizations": {
    "editorRuler.foreground": "#521e1e",

    // will change the color of three dots to red
    "editorHint.foreground": "#ff0000",

    // will underline the entire word with dots in your chosen color
    "editorHint.border": "#00ff66"
  },
  "workbench.iconTheme": "material-icon-theme",
  "[javascript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "explorer.confirmDragAndDrop": false,
  "explorer.confirmDelete": false,
  "[typescriptreact]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "editor.codeActionsOnSave": {
    "source.organizeImports": true
  },
  "liveshare.presence": true,
  "customizeUI.stylesheet": {
    ".monaco-workbench .part.statusbar>.items-container": "transform: scale(1.25); padding-left: 175px"
  },
  "typescript.updateImportsOnFileMove.enabled": "always",
  "[typescript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "cSpell.userWords": [
    "apify",
    "Bytient",
    "convolutional",
    "crawlee",
    "Datas",
    "employflorida",
    "Firestore",
    "fout",
    "keras",
    "Lemmatize",
    "Lemmatizer",
    "LSTM",
    "mjml",
    "nbsp",
    "Neumann",
    "nltk",
    "onet",
    "Punct",
    "redhawkdavid",
    "Roboto",
    "stopwords",
    "tbody",
    "unsub",
    "upserted"
  ],
  "[json]": {
    "editor.defaultFormatter": "vscode.json-language-features"
  },
  "typescript.tsserver.experimental.enableProjectDiagnostics": true,
  "gitlens.statusBar.enabled": false,
  "gitlens.views.branches.branches.layout": "list",
  "[jsonc]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[html]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.formatOnSave": false
  },
  "[mjml]": {
    "editor.defaultFormatter": "mjmlio.vscode-mjml"
  },
  "cSpell.enableFiletypes": ["mjml"],
  "editor.guides.highlightActiveIndentation": "always",
  "cSpell.diagnosticLevel": "Hint",

  "editor.tokenColorCustomizations": {
    "functions": "#ffb454",
    "strings": "#aad94c",
    "comments": "#acb6bf8c",
    "variables": "#bfbdb6"
  },
  "editor.semanticTokenColorCustomizations": {
    "rules": { "variable": "#bfbdb6" }
  },
  "editor.inlineSuggest.enabled": true,
  "[python]": {
    "editor.formatOnType": true
  },
  "workbench.colorTheme": "Visual Studio 2019 Dark"
}
